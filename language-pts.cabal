cabal-version: 2.2
name:          language-pts
version:       0

category: Language
synopsis: Pure Type Systems
description:
  @language-pts@ implements a pure type system, based on
  /A tutorial implementation of a dependently typed lambda calculus/
  <https://www.andres-loeh.de/LambdaPi/LambdaPi.pdf>
  .
  * Bi-directional type-checking
  * @bound@ for terms and values (not 'Int' de Bruijn or HOAS)
  * parametrised by PTS 'Specification'.
  * see "Language.PTS" module for more

license:       BSD-3-Clause
license-file:  LICENSE
author:        Oleg Grenrus <oleg.grenrus@iki.fi>
maintainer:    Oleg Grenrus <oleg.grenrus@iki.fi>

tested-with:
  GHC == 8.2.2
   || == 8.4.4
   || == 8.6.2

source-repository head
  type: git
  location: https://github.com/phadej/language-pts

flag bool
  description: add @Bool@ combinators to the type-system.
  manual:  True
  default: False

flag nat
  description: add @Nat@ combinators to the type-system.
  manual:  True
  default: False

flag eta
  description: Perform eta-conversion in @eval_@
  manual:  True
  default: False

flag fix
  description: Add @fix@ combinator to the type-system. Fix breaks everything :) /Only @Value@ implemented/.
  manual:  True
  default: False

library
  default-language: Haskell2010
  hs-source-dirs:   src
  ghc-options:      -Wall

  default-extensions: CPP

  if flag(bool)
    cpp-options: -DLANGUAGE_PTS_HAS_BOOL

  if flag(nat)
    cpp-options: -DLANGUAGE_PTS_HAS_NAT

  if flag(eta)
    cpp-options: -DLANGUAGE_PTS_HAS_ETA

  if flag(fix)
    cpp-options: -DLANGUAGE_PTS_HAS_FIX

  build-depends:
    , base            ^>=4.10.1.0 || ^>=4.11.1.0 || ^>=4.12.0.0
    , base-compat     ^>=0.10.4
    , bound           ^>=2.0.1
    , bound-extras    ^>=0
    , containers      ^>=0.5.10.2 || ^>=0.6.0.1
    , pretty-compact  ^>=3.0
    , lens            ^>=4.17
    , text            ^>=1.2.3.0
    , mtl             ^>=2.2.2
    , unification-fd  ^>=0.10.0.1
    , transformers
  exposed-modules:
    Language.PTS
    Language.PTS.Bound
    Language.PTS.Check
    Language.PTS.Error
    Language.PTS.Eval
    Language.PTS.Pretty
    Language.PTS.Quote
    Language.PTS.Script
    Language.PTS.Smart
    Language.PTS.Specification
    Language.PTS.Term
    Language.PTS.Sym
    Language.PTS.Systems
    Language.PTS.Value
    Language.PTS.Value.Check
    Language.PTS.WHNF

    Language.PTS.Examples
    Language.PTS.Examples.Booleans
    Language.PTS.Examples.Contexts
    Language.PTS.Examples.Identity
    Language.PTS.Examples.Errors

    Text.Show.Extras
